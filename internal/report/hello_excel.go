package report

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"time"

	"github.com/genrep/internal/core"
	"github.com/xuri/excelize/v2"
)

// HelloExcelReport generates a simple Excel report with "Hello World"
type HelloExcelReport struct {
	config *core.Config
	data   map[string]interface{}
}

// Initialize sets up the Hello Excel report generator with the provided configuration
func (r *HelloExcelReport) Initialize(config *core.Config) error {
	r.config = config
	r.data = make(map[string]interface{})
	return nil
}

// Generate creates a simple Excel report with "Hello World"
func (r *HelloExcelReport) Generate(ctx context.Context, dataSources map[string]core.DataSource) error {
	// Set up basic report data
	r.data["title"] = "Hello World Report"
	r.data["timestamp"] = time.Now().Format("2006-01-02 15:04:05")

	// Create the output directory if it doesn't exist
	outputDir := filepath.Dir(r.config.OutputPath)
	if _, err := os.Stat(outputDir); os.IsNotExist(err) {
		if err := os.MkdirAll(outputDir, 0755); err != nil {
			return fmt.Errorf("failed to create output directory: %w", err)
		}
	}

	// Create a simple Excel document with "Hello World"
	if err := r.generateExcelDoc(); err != nil {
		return fmt.Errorf("failed to generate Excel document: %w", err)
	}

	return nil
}

// generateExcelDoc creates a simple Excel document with "Hello World"
func (r *HelloExcelReport) generateExcelDoc() error {
	// Create a new Excel file
	f := excelize.NewFile()

	// Set cell values for Sheet1
	f.SetCellValue("Sheet1", "A1", "Hello World")
	f.SetCellValue("Sheet1", "A2", "This is a simple Excel document generated by GenRep.")
	f.SetCellValue("Sheet1", "A3", fmt.Sprintf("Generated at: %s", r.data["timestamp"]))

	// Add formatting
	styleID, err := f.NewStyle(&excelize.Style{
		Font: &excelize.Font{
			Bold:   true,
			Size:   16,
			Color:  "#1F497D",
		},
	})
	if err == nil {
		f.SetCellStyle("Sheet1", "A1", "A1", styleID)
	}

	// Auto adjust column width
	f.SetColWidth("Sheet1", "A", "A", 40)

	// Save the file
	if err := f.SaveAs(r.config.OutputPath); err != nil {
		return fmt.Errorf("failed to save Excel file: %w", err)
	}

	fmt.Printf("Generated Excel document at %s\n", r.config.OutputPath)
	return nil
}

// NewHelloExcelReport creates a new HelloExcelReport instance
func NewHelloExcelReport() *HelloExcelReport {
	return &HelloExcelReport{}
}
