package report

import (
	"archive/zip"
	"bytes"
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/genrep/internal/core"
	"github.com/nguyenthenguyen/docx"
)

// HelloWordReport generates a simple Word report with "Hello World"
type HelloWordReport struct {
	config    *core.Config
	data      map[string]interface{}
}

// Initialize sets up the Hello Word report generator with the provided configuration
func (r *HelloWordReport) Initialize(config *core.Config) error {
	r.config = config
	r.data = make(map[string]interface{})
	return nil
}

// Generate creates a simple Word report with "Hello World"
func (r *HelloWordReport) Generate(ctx context.Context, dataSources map[string]core.DataSource) error {
	// Set up basic report data
	r.data["title"] = "Hello World Report"
	r.data["timestamp"] = time.Now().Format("2006-01-02 15:04:05")
	
	// Create the output directory if it doesn't exist
	outputDir := filepath.Dir(r.config.OutputPath)
	if _, err := os.Stat(outputDir); os.IsNotExist(err) {
		if err := os.MkdirAll(outputDir, 0755); err != nil {
			return fmt.Errorf("failed to create output directory: %w", err)
		}
	}
	
	// Create a proper Word document with "Hello World"
	if err := r.generateWordDoc(); err != nil {
		return fmt.Errorf("failed to generate Word document: %w", err)
	}
	
	return nil
}

// generateWordDoc creates a simple Word document with "Hello World"
func (r *HelloWordReport) generateWordDoc() error {
	// First, we need a template Word document to start with
	// Let's create a template file in the system temp directory
	tempDir := os.TempDir()
	templatePath := filepath.Join(tempDir, "hello_template.docx")

	// Get the embedded template from the resources or create a simple one
	// For simplicity, we'll use a pre-made template
	// You should include a simple template file in your distribution
	err := createBasicDocxFile(templatePath)
	if err != nil {
		return fmt.Errorf("failed to create template: %w", err)
	}

	// Open the template file
	doc, err := docx.ReadDocxFile(templatePath)
	if err != nil {
		return fmt.Errorf("failed to open template file: %w", err)
	}
	defer doc.Close()

	// Get the document content
	docContent := doc.Editable()

	// Replace placeholders with content
	docContent.Replace("{{title}}", r.data["title"].(string), -1)
	docContent.Replace("{{date}}", r.data["timestamp"].(string), -1)
	docContent.Replace("{{message}}", "Hello World", -1)
	docContent.Replace("{{description}}", "This is a simple Word document generated by GenRep.", -1)

	// Save the document to the output path
	err = docContent.WriteToFile(r.config.OutputPath)
	if err != nil {
		return fmt.Errorf("failed to write Word document: %w", err)
	}

	fmt.Printf("Generated Word document at %s\n", r.config.OutputPath)
	return nil
}

// Helper function to create a basic DOCX file with placeholders
func createBasicDocxFile(filepath string) error {
	// Minimal document.xml content with placeholders
	documentXML := `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:p>
      <w:r>
        <w:t>{{title}}</w:t>
      </w:r>
    </w:p>
    <w:p>
      <w:r>
        <w:t>Date: {{date}}</w:t>
      </w:r>
    </w:p>
    <w:p>
      <w:r>
        <w:t>{{message}}</w:t>
      </w:r>
    </w:p>
    <w:p>
      <w:r>
        <w:t>{{description}}</w:t>
      </w:r>
    </w:p>
  </w:body>
</w:document>`

	// Create a buffer to write the zip file to
	buf := new(bytes.Buffer)
	
	// Create a new zip archive
	zipWriter := zip.NewWriter(buf)
	
	// Add the document.xml file to the zip
	f, err := zipWriter.Create("word/document.xml")
	if err != nil {
		return err
	}
	_, err = f.Write([]byte(documentXML))
	if err != nil {
		return err
	}
	
	// Add other required files for a minimal DOCX (this is simplified)
	for _, filename := range []string{
		"_rels/.rels",
		"word/_rels/document.xml.rels",
		"[Content_Types].xml",
	} {
		f, err := zipWriter.Create(filename)
		if err != nil {
			return err
		}
		
		// Write minimal content for each file
		var content string
		switch {
		case strings.HasSuffix(filename, ".rels"):
			content = `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
  <Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
</Relationships>`
		case filename == "[Content_Types].xml":
			content = `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
  <Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
  <Default Extension="xml" ContentType="application/xml"/>
  <Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
</Types>`
		}
		
		_, err = f.Write([]byte(content))
		if err != nil {
			return err
		}
	}
	
	// Close the zip writer
	err = zipWriter.Close()
	if err != nil {
		return err
	}
	
	// Write the zip file to disk
	return os.WriteFile(filepath, buf.Bytes(), 0644)
}

// NewHelloWordReport creates a new HelloWordReport instance
func NewHelloWordReport() *HelloWordReport {
	return &HelloWordReport{}
}
